<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.llm.llm_knowledge.mapper.PostMapper">

    <!--根据条件查询帖子-->
    <select id="selectPostsWithFilters" resultType="com.llm.llm_knowledge.dto.PostDTO">
        SELECT
        post.post_id,
        post.post_title,
        post.post_content,
        cmn.community_id,
        cmn.community_name,
        `user`.user_name,
        post.created_time,
        post.updated_time
        FROM
        post
        INNER JOIN community AS cmn ON post.community_id = cmn.community_id
        INNER JOIN user_info AS `user` ON post.user_id = `user`.user_id
        <where>
            <if test="postTitle != null and postTitle != ''">
                AND post.post_title LIKE CONCAT('%', #{postTitle}, '%')
            </if>
            <if test="postContent != null and postContent != ''">
                AND post.post_content LIKE CONCAT('%', #{postContent}, '%')
            </if>
            <if test="communityName != null and communityName != ''">
                AND cmn.community_name LIKE CONCAT('%', #{communityName}, '%')
            </if>
            <if test="userName != null and userName != ''">
                AND `user`.user_name LIKE CONCAT('%', #{userName}, '%')
            </if>
        </where>
        ORDER BY post.created_time DESC
    </select>

    <!--查询帖子的评论-->
    <select id="selectPostCommentsWithFilters" resultType="com.llm.llm_knowledge.dto.PostCommentDTO">
        SELECT
        post.post_id,
        post.post_title,
        postcm.comment_content,
        `user`.user_name,
        post.created_time,
        post.updated_time
        FROM
        post
        INNER JOIN post_comment AS postcm ON post.post_id = postcm.post_id
        INNER JOIN user_info AS `user` ON postcm.user_id = `user`.user_id
        <where>
            <if test="postId != null">
                post.post_id = #{postId}
            </if>
        </where>
        ORDER BY post.created_time DESC
    </select>

    <!--对帖子进行逻辑删除-->
    <update id="delPostLogic" parameterType="int">
        UPDATE post
        SET deleted = 1
        WHERE post_id = #{postId}
    </update>

    <!--对帖子评论逻辑删除-->
    <update id="delPostCommentLogic" parameterType="int">
        UPDATE post_comment
        SET deleted = 1
        WHERE comment_id = #{commentId}
    </update>


    <!--用户浏览帖子后要把帖子浏览表更新,时间更新,view_count + 1-->
    <insert id="addPostView" parameterType="com.llm.llm_knowledge.entity.PostView">
        INSERT INTO post_view (user_id, post_id, updated_time, view_count)
        VALUES (#{userId}, #{postId}, CURRENT_TIMESTAMP, 1)
        ON DUPLICATE KEY UPDATE
                             updated_time = CURRENT_TIMESTAMP,
                             view_count = view_count + 1;
    </insert>


    <!--用户点赞帖子后会在帖子点赞表增加一条点赞记录-->
    <!--插入新记录-->
    <insert id="addPostLike" parameterType="map" >
        INSERT INTO post_like (user_id, post_id,updated_time,deleted)
        VALUES (#{userId}, #{postId}, CURRENT_TIMESTAMP, 0)
    </insert>
    <!--查询记录-->
    <select id="searchPostLike" parameterType="map" resultType="com.llm.llm_knowledge.entity.PostLike">
        SELECT * FROM post_like WHERE user_id = #{userId} AND post_id = #{postId}
    </select>
    <!--更新记录-->
    <update id="updateLikeStatus" parameterType="map">
        UPDATE post_like
        SET deleted = CASE
                          WHEN deleted = 0 THEN 1   -- 如果当前是点赞（deleted=0），则取消点赞（设置为1）
                          WHEN deleted = 1 THEN 0   -- 如果当前是取消点赞（deleted=1），则恢复点赞（设置为0）
            END,
            updated_time = CURRENT_TIMESTAMP  -- 更新点赞时间
        WHERE user_id = #{userId} AND post_id = #{postId};
    </update>


    <!--用户收藏帖子后会在帖子收藏表增加一条点赞记录-->
    <!--插入新记录-->
    <insert id="addPostFavorite" parameterType="map" >
        INSERT INTO post_favorite (user_id, post_id,updated_time,deleted)
        VALUES (#{userId}, #{postId}, CURRENT_TIMESTAMP, 0)
    </insert>
    <!--查询记录-->
    <select id="searchPostFavorite" parameterType="map" resultType="com.llm.llm_knowledge.entity.PostFavorite">
        SELECT * FROM post_favorite WHERE user_id = #{userId} AND post_id = #{postId}
    </select>
    <!--更新记录-->
    <update id="updateFavoriteStatus" parameterType="map">
        UPDATE post_favorite
        SET deleted = CASE
                          WHEN deleted = 0 THEN 1   -- 如果当前是收藏（deleted=0），则取消收藏（设置为1）
                          WHEN deleted = 1 THEN 0   -- 如果当前是取消收藏（deleted=1），则恢复收藏（设置为0）
            END,
            updated_time = CURRENT_TIMESTAMP  -- 更新点赞时间
        WHERE user_id = #{userId} AND post_id = #{postId};
    </update>


    <!--最火帖子-->
    <select id="getTopPosts" resultType="com.llm.llm_knowledge.entity.Post">
        SELECT
        p.post_id,
        p.post_title,
        p.post_content,
        COUNT(pl.post_like_id) AS like_count
        FROM
        post p
        LEFT JOIN
        post_like pl
        ON
        p.post_id = pl.post_id
        <if test="onlyLiked != null and onlyLiked">
            AND pl.deleted = 0 -- 只统计已点赞的记录
        </if>
        WHERE
        p.deleted = 0 -- 只统计展示中的帖子
        <if test="postTitle != null and postTitle != ''">
            AND p.post_title LIKE CONCAT('%', #{postTitle}, '%') -- 按标题搜索
        </if>
        <if test="postContent != null and postContent != ''">
            AND p.post_content LIKE CONCAT('%', #{postContent}, '%') -- 按内容搜索
        </if>
        GROUP BY
        p.post_id
        ORDER BY
        like_count DESC -- 按点赞数量降序排列

    </select>


    <!--最新帖子-->
    <select id="getLatestPosts" resultType="com.llm.llm_knowledge.entity.Post">
        SELECT
        p.post_id,
        p.post_title,
        p.post_content,
        p.created_time
        FROM
        post p
        WHERE
        p.deleted = 0 -- 只统计展示中的帖子
        <if test="postTitle != null and postTitle != ''">
            AND p.post_title LIKE CONCAT('%', #{postTitle}, '%') -- 按标题搜索
        </if>
        <if test="postContent != null and postContent != ''">
            AND p.post_content LIKE CONCAT('%', #{postContent}, '%') -- 按内容搜索
        </if>
        ORDER BY
        p.created_time DESC -- 按创建时间降序排列
    </select>


    <!--推荐帖子-->
    <select id="getRecommendPosts" resultType="com.llm.llm_knowledge.entity.Post">
        SELECT p.post_id,
               p.post_title,
               p.post_content,
               p.created_time
        FROM post p
        WHERE p.recommend = 1
        ORDER BY p.created_time
    </select>





</mapper>